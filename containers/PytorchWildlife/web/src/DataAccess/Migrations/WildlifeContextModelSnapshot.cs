// <auto-generated />
using System;
using Homebase.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Homebase.DataAccess.Migrations
{
    [DbContext(typeof(WildlifeContext))]
    partial class WildlifeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Homebase.DataAccess.Models.ClassNameMap", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ClassifierName")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("classifier_name");

                    b.Property<string>("DisplayDescription")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("display_description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("display_name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "ix_class_name_map_id");

                    b.ToTable("class_name_map", (string)null);
                });

            modelBuilder.Entity("Homebase.DataAccess.Models.ClassifiedAnimal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AnimalName")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("animal_name");

                    b.Property<double>("Confidence")
                        .HasColumnType("FLOAT")
                        .HasColumnName("confidence");

                    b.Property<int>("VideoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("video_id");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.HasIndex(new[] { "Id" }, "ix_classified_animal_id");

                    b.ToTable("classified_animal", (string)null);
                });

            modelBuilder.Entity("Homebase.DataAccess.Models.IdxLog", b =>
                {
                    b.Property<double?>("Confidence")
                        .HasColumnType("REAL")
                        .HasColumnName("confidence");

                    b.Property<int?>("FrameIdx")
                        .HasColumnType("INT")
                        .HasColumnName("frame_idx");

                    b.Property<string>("Prediction")
                        .HasColumnType("TEXT")
                        .HasColumnName("prediction");

                    b.Property<string>("VidName")
                        .HasColumnType("TEXT")
                        .HasColumnName("vid_name");

                    b.ToTable("idx_logs", (string)null);
                });

            modelBuilder.Entity("Homebase.DataAccess.Models.VideoProcess", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("BatchName")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("batch_name");

                    b.Property<DateTime?>("CompletedTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("completed_time");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("file_hash");

                    b.Property<int>("FileSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("file_size");

                    b.Property<string>("ProcessedFile")
                        .HasColumnType("VARCHAR")
                        .HasColumnName("processed_file");

                    b.Property<string>("SourceFile")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("source_file");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("status");

                    b.Property<DateTime?>("SubmitTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("submit_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("VideoName")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("video_name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "ix_video_process_id");

                    b.ToTable("video_process", (string)null);
                });

            modelBuilder.Entity("Homebase.DataAccess.Models.ClassifiedAnimal", b =>
                {
                    b.HasOne("Homebase.DataAccess.Models.VideoProcess", "Video")
                        .WithMany("ClassifiedAnimals")
                        .HasForeignKey("VideoId")
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Homebase.DataAccess.Models.VideoProcess", b =>
                {
                    b.Navigation("ClassifiedAnimals");
                });
#pragma warning restore 612, 618
        }
    }
}
