@page "/library"
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Library> Logger

<PageTitle>VidID - Library</PageTitle>

<h1>Vid Classifier</h1>

<CheckStatus />

<div>
    <h2>Library</h2>
    @if (videos is null)
    {
        <p>@libraryMessage</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>File Name</th>
                    <th>Upload Date</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var vid in videos)
                {
                    <tr>
                        <td>@vid.FileName</td>
                        <td>@vid.UploadDate</td>
                        <td>@vid.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private string libraryMessage = "Retrieving Library...";
    private Video[]? videos;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        var client = HttpClientFactory.CreateClient("vidservice");
        try
        {
            //var response = await client.GetAsync("/library");
            //if (!response.IsSuccessStatusCode)
            //throw new Exception("Failed to retrieve library");
            //videos = await response.Content.ReadFromJsonAsync<Video[]>();
            await AddData();
        }
        catch (Exception e)
        {
            libraryMessage = $"Error: {e.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }
    async Task AddData()
    {
        await Task.Delay(3000);
        videos = [
        new ("video1.mp4", new (2021, 10, 1), "Processing", [new (0.9m, "Dog"), new (0.8m, "Cat")]),
        new ("video2.mp4", new (2021, 10, 2), "Complete", [new (0.9m, "Dog"), new (0.8m, "Cat")]),
        new ("video3.mp4", new (2021, 10, 3), "Processing", [new (0.9m, "Dog"), new (0.8m, "Cat")]),
        new ("video4.mp4", new (2021, 10, 4), "Complete", [new (0.9m, "Dog"), new (0.8m, "Cat")]),
        new ("video5.mp4", new (2021, 10, 5), "Processing", [new (0.9m, "Dog"), new (0.8m, "Cat")]),
        new ("video6.mp4", new (2021, 10, 6), "Complete", [new (0.9m, "Dog"), new (0.8m, "Cat")]),
        new ("video7.mp4", new (2021, 10, 7), "Processing", [new (0.9m, "Dog"), new (0.8m, "Cat")]),
        ];
    }
    record IdentifiedAnimal(decimal Confidence, string Name);
    record Video(string FileName, DateOnly UploadDate, string Status, IdentifiedAnimal[]? IdentifiedAnimals = null);
}